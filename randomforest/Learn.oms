val images = Val[Array[File]]
val nbTrees   = Val[Int]
val treeDepth = Val[Int]
val kFold = 10

val random = new util.Random(42)
val imagesArrays = 
  (0 until kFold).map(i => random.shuffle((workDirectory / "images").listFiles.toSeq).toArray)

val parameterExploration = 
  ExplorationTask(
    (nbTrees in (5 to 25 by 5)) x
    (treeDepth in (3 to 18 by 3))
  )
  
val imagesExploration = 
  ExplorationTask(images in imagesArrays) set (
    inputs  += (nbTrees, treeDepth),
    outputs += (nbTrees, treeDepth)
  )

val learningOutput = Val[String]

val learning = SystemExecTask(
  "./archive_python2.bin",
  "archive_python2/re-execute.sh python forest.py /home/jopasserat/Downloads/images ${nbTrees} ${treeDepth}"
) set (
  inputs += (nbTrees, treeDepth),
  resources += workDirectory / "archive_python2.bin",
  inputFileArrays += (images, "archive_python2/rootfs/home/jopasserat/Downloads/images/image", ".jpg"),
  stdOut := learningOutput,
  outputs += (nbTrees, treeDepth)
)


val env =
  SLURMEnvironment(
    "jpassera",
    "predict5.doc.ic.ac.uk",
    queue="short"
  )

val condor =
  CondorEnvironment(
    "jpassera",
    "hornbeam.doc.ic.ac.uk"
  )

val pointsHook = 
  AppendToCSVFileHook(
    workDirectory / "points.csv",
    nbTrees, treeDepth, learningOutput)
    
parameterExploration -< imagesExploration -< (learning hook pointsHook)
