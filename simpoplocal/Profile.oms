import Model._
import Replication._

val aggregatedFitness = Val[Double]

val relativizeTask = 
  ScalaTask("""val aggregatedFitness = Seq(sumKsFailValue / 200, medPop / 10000, medTime / 4000).max""") set (
    inputs += (sumKsFailValue, medPop, medTime),
    outputs += aggregatedFitness
  )

val relativized = replication -- relativizeTask

val inputDomains = 
  Seq(
    rMax -> (2.0, 50000.0),
    distanceDecay -> (0.0, 4.0),
    pCreation -> (0.0 -> 0.01),
    pDiffusion -> (0.0, 0.01),
    innovationImpact -> (0.0, 2.0)
  )

def profile(parameter: Int) = {  
  // Calibration profile of 1000 points for the parameter
  val evolution = 
    GenomeProfile (
      x = parameter,
      nX = 1000,
      termination = 2 hours,
      inputs = inputDomains,
      objective = aggregatedFitness,
      reevaluate = 0.01
    )


  // Define the island model
  val (isl, ga) = IslandSteadyGA(evolution)(relativized, island = 1000, termination = 200000, sample = 500)

  // Define the hook to save the results
  val savePopulation = SaveProfileHook(ga, workDirectory / s"profile/$parameter/")

  // Define the execution
  (isl on grid hook savePopulation)
}

val firstCapsule = Capsule(EmptyTask())

val profiles = (0 until inputDomains.size).map(profile)

profiles.map(firstCapsule -- _).reduce(_ + _)
