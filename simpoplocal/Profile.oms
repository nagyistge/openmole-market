import Model._

val aggregatedFitness = Val[Double]

val aggregate = 
  ScalaTask("""
    |val normalised = Seq(ksValue, deltaPop, deltaTime)
    |val aggregatedFitness = if(normalised.exists(_.isNaN)) Double.PositiveInfinity else normalised.max""".stripMargin) set (
    inputs += (ksValue, deltaPop, deltaTime),
    outputs += aggregatedFitness
  )

val grid = DIRACEnvironment("vo.complex-systems.eu")

def profile(variable: Val[Double]) = {  
  
  val algo =
    GenomeProfile (
      x = variable,
      nX = 100,
      genome = Seq(
        rMax in (2.0, 50000.0),
        distanceDecay in (0.0, 4.0),
        pCreation in (0.0, 0.01),
        pDiffusion in (0.0, 0.01),
        innovationImpact in (0.0, 2.0),
        innovationLife in (1.0, 4001.0)
      ),
      objective = aggregatedFitness,
      stochastic = Stochastic(seed = seed)
    )

  // Calibration profile of 1000 points for the parameter
  val evolution = SteadyStateEvolution(
    algorithm = algo,
    evaluation =  evaluateModel -- aggregate,
    termination = 30 minutes
  )

  // Define the island model
  val island = IslandEvolution(evolution, parallelism = 1000, termination = 200000)

  // Define the hook to save the results
  val savePopulation = SavePopulationHook(island, workDirectory / s"profile2/${variable.name}/")

  // Define the execution
  (island on grid hook savePopulation)
}

val firstCapsule = Capsule(EmptyTask())
val profiles = Seq(rMax, distanceDecay, pCreation, pDiffusion, innovationImpact, innovationLife).map(profile)
profiles.map(firstCapsule -- _).reduce(_ & _)

