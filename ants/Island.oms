import Calibrate._

// Define the population (200) and the computation time (1h)
// The remaining is the same as above
val evolution =
  SteadyStateEvolution(
    algorithm =   
      NSGA2(
        mu = 200,
        genome = Seq(gDiffusionRate in (0.0, 99.0), gEvaporationRate in (0.0, 99.0)),
        objectives = Seq(obj),
        replication = Replication(seed = seed)
      ),
    evaluation = modelCapsule -- aggregate,
    termination = 1 hour
  )

// Define the island model with 2,000 concurrent islands.
// The algorithm stops after 200,000 islands evaluations.
val island = IslandEvolution(evolution, parallelism = 2000, termination = 200000)

val savePopulationHook = SavePopulationHook(island, workDirectory / "results")

// Define the execution environment
val env = LocalEnvironment(4)

// Define the workflow
(island on env hook savePopulationHook)

