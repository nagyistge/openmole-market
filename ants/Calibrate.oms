
// Define the input variables
val gPopulation = Val[Double]
val gDiffusionRate = Val[Double]
val gEvaporationRate = Val[Double]

// Define the output variables
val food1 = Val[Double]
val food2 = Val[Double]
val food3 = Val[Double]

val obj = Val[Double]
val seed = Val[Int]

// Define the NetlogoTask
val cmds = Seq("run-to-grid")

val ants =
  NetLogo5Task(workDirectory / "ants.nlogo", cmds, seed = seed) set (
    // Map the OpenMOLE variables to NetLogo variables
    netLogoInputs += (gPopulation, "gpopulation"),
    netLogoInputs += (gDiffusionRate, "gdiffusion-rate"),
    netLogoInputs += (gEvaporationRate, "gevaporation-rate"),
    netLogoOutputs += ("final-ticks-food1", food1),
    netLogoOutputs += ("final-ticks-food2", food2),
    netLogoOutputs += ("final-ticks-food3", food3),
    gPopulation := 100
  )
  
val aggregate = 
  ScalaTask("val obj = math.abs(250 - food1) + math.abs(400 - food2) + math.abs(800 - food3)") set (
    inputs += (food1, food2, food3),
    outputs += obj
  )
  
val modelCapsule = Capsule(ants)

val evolution =
  SteadyStateEvolution(
    algorithm =   
      NSGA2(
        mu = 10,
        genome = Seq(gDiffusionRate in (0.0, 99.0), gEvaporationRate in (0.0, 99.0)),
        objectives = Seq(obj),
        stochastic = Stochastic(seed = seed)
      ),
    evaluation = modelCapsule -- aggregate,
    parallelism = 10,
    termination = 100
  )
  
// Define a hook to save the Pareto frontier
val savePopulationHook = SavePopulationHook(evolution, workDirectory / "calibration")

val env = LocalEnvironment(5)

// Plug everything together to create the workflow
(evolution hook savePopulationHook on env)
