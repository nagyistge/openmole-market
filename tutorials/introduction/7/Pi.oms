// Define the variables that are transmitted between the tasks
val seed = Val[Long]
val pi = Val[Double]
val piAvg = Val[Double]

// Define the design of experiment on the seed for the random number generator
val exploration =
  ExplorationTask(seed in UniformDistribution[Long](42) take 100)

// Define the model task that computes an estimation of pi
val model =
  ScalaTask("""
    |val random = newRNG(seed)
    |val points = 1000000
    |val inside = 
    |  for {
    |    i <- (0 until points).toIterator
    |    x = random.nextDouble()
    |    y = random.nextDouble()
    |  } yield { (x * x) + (y * y) }
    |val pi = (inside.count(_ < 1).toDouble / points) * 4
    |""".stripMargin) set (
      name := "pi",
      inputs += seed,
      outputs += pi
    )
    
// Define the average task that average several estimation of pi
val average = 
  ScalaTask("""val piAvg = pi.sum / pi.size""") set (
    name := "average",
    inputs += pi.toArray,
    outputs += piAvg
  )

// Complete the workflow to average the values of Pi and 
// distribute the model execution on a multi-threaded environment
exploration -< (model hook ToStringHook())


