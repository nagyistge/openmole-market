
import _parent_.Model._
import Objective._

// Execute the workflow
// Define the population (10) and the number of generations (100).
// Define the inputs and their respective variation bounds.
// Define the objectives to minimize.
// Assign 1 percent of the computing time to reevaluating
// parameter settings to eliminate over-evaluated individuals.
val nsga2 = 
  NSGA2(
    mu = 50,
    genome = Seq(
      diffusion in (0.0, 99.0),
      evaporation in (0.0, 99.0)),
    objectives = Seq(deltaFood),
    stochastic = Stochastic(seed = seed, aggregation = Seq(median))
  )

val evolution =
  SteadyStateEvolution(
    algorithm = nsga2,
    evaluation = ants -- objective,
    parallelism = 10,
    termination = 100
  )

// Define a hook to save the Pareto frontier
val savePopulationHook = SavePopulationHook(evolution, workDirectory / "results")

// Plug everything together to create the workflow
(evolution hook savePopulationHook)
  
  
  
  